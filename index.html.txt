<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Creative Journal - Golden Inspiration</title>
  <!-- Updated Google Fonts link to use Nunito -->
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700;800&display=swap" rel="stylesheet">
  <style>
    /* General Styling and Background */
    body {
      margin: 0;
      /* Changed font to Nunito for better readability */
      font-family: 'Nunito', sans-serif;
      /* Increased base font size slightly */
      font-size: 16px;
      background: url('https://images.unsplash.com/photo-1552053831-71594a27632d') no-repeat center center fixed;
      background-size: cover;
      color: #4E342E; /* Rich brown */
      overflow: hidden;
    }

    /* Overlay */
    .overlay {
      background-color: rgba(255, 248, 220, 0.2);
      position: absolute;
      width: 100%;
      height: 100%;
      z-index: 0;
      backdrop-filter: blur(5px);
    }

    .app-container {
      display: flex;
      height: 100vh;
      position: relative;
      z-index: 1;
    }

    /* Sidebar Styling */
    .sidebar {
      width: 260px; /* Slightly wider sidebar for larger font */
      background-color: rgba(255, 250, 240, 0.85);
      backdrop-filter: blur(10px);
      overflow-y: auto;
      padding: 20px 10px;
      border-right: 1px solid rgba(140, 90, 40, 0.2);
      box-shadow: 2px 0 15px rgba(0, 0, 0, 0.2);
    }

    .tab-button {
      display: block;
      width: 100%;
      padding: 12px 15px;
      background: none;
      border: none;
      font-family: 'Nunito', sans-serif;
      /* Increased font size and made bolder (ExtraBold 800) for clarity */
      font-size: 26px;
      font-weight: 800;
      color: #6D4C41; /* Warm brown */
      text-align: left;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.2s;
      border-radius: 8px;
      margin-bottom: 10px;
    }

    .tab-button:hover {
      background-color: rgba(255, 213, 79, 0.5);
      transform: translateX(5px);
    }

    .tab-button.active {
      background-color: #DAA520;
      color: #fff;
    }

    /* Main Content Area */
    .main-area {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      padding: 20px;
      overflow-y: auto;
    }

    /* Textarea Styling */
    #entryInput {
      width: 100%;
      height: 40vh;
      /* Increased font size from 16px to 18px */
      font-size: 18px;
      font-family: 'Nunito', sans-serif;
      padding: 15px;
      margin-bottom: 15px;
      background-color: rgba(255, 255, 255, 0.95);
      color: #4E342E;
      border: 1px solid #DAA520;
      border-radius: 8px;
      resize: none;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      line-height: 1.5; /* Improved spacing for readability */
    }

    #entryInput::placeholder {
      color: #A1887F;
    }

    /* Top Button Container */
    .top-buttons {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }

    /* Button and Select Styling */
    .top-buttons button, #colorPicker {
      background-color: #FFC107;
      border: none;
      padding: 10px 15px;
      margin: 5px;
      color: #4E342E;
      cursor: pointer;
      border-radius: 8px;
      transition: background-color 0.3s, transform 0.2s;
      font-family: 'Nunito', sans-serif;
      font-weight: 700;
      /* Increased font size for buttons */
      font-size: 16px;
    }

    .top-buttons button:hover {
      background-color: #FFD54F;
      transform: translateY(-2px);
    }

    /* Special styling for the Inspire button */
    .inspire-button {
        background-color: #FFA000;
        border: none;
        padding: 10px 15px;
        margin: 5px;
        color: #fff;
        cursor: pointer;
        border-radius: 8px;
        transition: all 0.3s;
        font-family: 'Nunito', sans-serif;
        font-weight: 700;
        font-size: 16px;
    }

    .inspire-button:hover {
        background-color: #FFC107;
        box-shadow: 0 0 15px #FFC107;
        transform: translateY(-2px);
    }


    /* Inspiration Area */
    .inspiration-area {
        font-family: 'Nunito', sans-serif;
        /* Increased font size */
        font-size: 24px;
        font-weight: 700;
        text-align: center;
        padding: 15px;
        margin-bottom: 15px;
        background-color: rgba(255, 235, 160, 0.7);
        border-radius: 8px;
        min-height: 30px;
    }

    /* History Area */
    .history {
      display: flex;
      overflow-x: auto;
      margin-top: 15px;
      border-top: 1px solid rgba(140, 90, 40, 0.3);
      padding-top: 15px;
    }

    .history-entry {
      background-color: rgba(255, 255, 255, 0.7);
      padding: 8px 12px;
      margin-right: 10px;
      cursor: pointer;
      /* Increased font size from 14px to 16px */
      font-size: 16px;
      border-radius: 5px;
      white-space: nowrap;
      transition: background-color 0.3s;
      border: 1px solid rgba(140, 90, 40, 0.2);
    }

    .history-entry:hover {
        background-color: #FFECB3;
    }

    /* Canvas Styling */
    canvas {
      border: 1px solid #DAA520;
      background-color: rgba(255, 255, 255, 0.95);
      border-radius: 8px;
      width: 100%;
      height: 30vh;
      touch-action: none;
      cursor: crosshair;
    }

  </style>
</head>
<body>
  <div class="overlay"></div>

  <div class="app-container">
    <div class="sidebar" id="tabList">
      <button class="tab-button active" onclick="switchTab('States')">States</button>
      <button class="tab-button" onclick="switchTab('Thoughts')">Thoughts</button>
      <button class="tab-button" onclick="switchTab('Philosophies')">Philosophies</button>
      <button class="tab-button" onclick="switchTab('Models')">Models</button>
      <button class="tab-button" onclick="switchTab('Goals')">Goals</button>
      <button class="tab-button" onclick="switchTab('Objectives')">Objectives</button>
      <button class="tab-button" onclick="switchTab('Experiments')">Experiments</button>
    </div>

    <div class="main-area">
        <!-- New Inspiration Area -->
        <div class="inspiration-area" id="inspirationQuote">
            Click 'Inspire Me' to spark your creativity!
        </div>

      <div class="top-buttons">
        <div>
            <button onclick="saveEntry()">ðŸ’¾ Save</button>
            <button onclick="clearEntry()">ðŸ§¼ Clear Text</button>
            <button onclick="clearCanvas()">ðŸŽ¨ Clear Canvas</button>
             <button class="inspire-button" onclick="getInspiration()">ðŸ’¡ Inspire Me</button>
        </div>
        <div>
            <!-- Updated font and size for the label -->
            <label for="colorPicker" style="font-family: 'Nunito', sans-serif; font-size: 20px; font-weight: 700; color: #4E342E; background-color: rgba(255,255,255,0.5); padding: 5px 10px; border-radius: 5px;">Draw Color:</label>
            <select id="colorPicker">
                <!-- Default drawing color set to a rich brown -->
                <option value="#4E342E">Rich Brown</option>
                <option value="black">Black</option>
                <option value="red">Red</option>
                <option value="green">Green</option>
                <option value="blue">Blue</option>
                <option value="orange">Orange</option>
                <option value="purple">Purple</option>
                <option value="pink">Pink</option>
                <option value="teal">Teal</option>
                <option value="white">White</option>
            </select>
        </div>
      </div>

      <textarea id="entryInput" placeholder="What's on your mind? Let your creativity flow..."></textarea>
      <canvas id="drawCanvas"></canvas>

      <div class="history" id="historyTabs"></div>
    </div>
  </div>

  <script>
    // Initialize state and elements
    let currentTab = 'States';
    // Use a unique localStorage key (V7)
    let entries = JSON.parse(localStorage.getItem('creativeEntriesV7') || '{}');
    const entryInput = document.getElementById('entryInput');
    const historyTabs = document.getElementById('historyTabs');
    const drawCanvas = document.getElementById('drawCanvas');
    const ctx = drawCanvas.getContext('2d');
    const inspirationQuote = document.getElementById('inspirationQuote');
    let drawing = false;
    let color = "#4E342E"; // Default color Rich Brown

    const quotes = [
        "Creativity is intelligence having fun. â€“ Albert Einstein",
        "You can't use up creativity. The more you use, the more you have. â€“ Maya Angelou",
        "The chief enemy of creativity is 'good' sense. â€“ Pablo Picasso",
        "To live a creative life, we must lose our fear of being wrong. â€“ Joseph Chilton Pearce",
        "Happiness is a warm puppy. â€“ Charles M. Schulz",
        "Creativity takes courage. â€“ Henri Matisse",
        "The world would be a nicer place if everyone had the ability to love as unconditionally as a dog. â€“ M.K. Clinton",
        "Everything you can imagine is real. â€“ Pablo Picasso"
    ];

    function getInspiration() {
        const randomIndex = Math.floor(Math.random() * quotes.length);
        inspirationQuote.textContent = quotes[randomIndex];
    }

    function switchTab(tab) {
      currentTab = tab;
      document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
      Array.from(document.querySelectorAll('.tab-button')).find(b => b.textContent === tab).classList.add('active');
      entryInput.value = '';
      clearCanvas();
      loadEntries();
    }

    // Updated saveEntry to include drawings
    function saveEntry() {
      const text = entryInput.value.trim();
      const drawingData = drawCanvas.toDataURL();

      if (!text && isCanvasBlank()) {
          alert("Entry is empty. Please write or draw something.");
          return;
      }

      if (!entries[currentTab]) entries[currentTab] = [];
      
      const timestamp = new Date().toLocaleString();
      entries[currentTab].push({ text, drawing: drawingData, date: timestamp });
      localStorage.setItem('creativeEntriesV7', JSON.stringify(entries));
      entryInput.value = '';
      clearCanvas();
      loadEntries();
    }

    function loadEntries() {
      historyTabs.innerHTML = '';
      if (!entries[currentTab]) return;
      // Display newest entries first
      entries[currentTab].slice().reverse().forEach((e, index) => {
        const actualIndex = entries[currentTab].length - 1 - index;
        const tab = document.createElement('div');
        tab.className = 'history-entry';
        tab.textContent = e.date;
        tab.onclick = () => loadSpecificEntry(e);
        
        // Right-click to delete
        tab.oncontextmenu = (ev) => {
          ev.preventDefault();
          if (confirm('Delete this entry?')) {
            entries[currentTab].splice(actualIndex, 1);
            localStorage.setItem('creativeEntriesV7', JSON.stringify(entries));
            loadEntries();
            entryInput.value = '';
            clearCanvas();
          }
        };
        historyTabs.appendChild(tab);
      });
    }

    // Function to load a specific entry's text and drawing
    function loadSpecificEntry(entry) {
        entryInput.value = entry.text;
        const img = new Image();
        img.onload = function() {
            clearCanvas();
            ctx.drawImage(img, 0, 0);
        };
        if (entry.drawing) {
            img.src = entry.drawing;
        } else {
            clearCanvas();
        }
    }

    function clearEntry() {
      entryInput.value = '';
    }

    function clearCanvas() {
        ctx.clearRect(0, 0, drawCanvas.width, drawCanvas.height);
    }

    // Helper function to check if canvas is blank
    function isCanvasBlank() {
        const blank = document.createElement('canvas');
        blank.width = drawCanvas.width;
        blank.height = drawCanvas.height;
        return drawCanvas.toDataURL() === blank.toDataURL();
    }

    function resizeCanvas() {
      // Store current drawing before resizing
      let data = null;
      if (drawCanvas.width > 0 && drawCanvas.height > 0 && !isCanvasBlank()) {
        data = drawCanvas.toDataURL();
      }
      
      drawCanvas.width = drawCanvas.clientWidth;
      drawCanvas.height = drawCanvas.clientHeight;
      
      // Redraw stored image after resizing
      if (data) {
          const img = new Image();
            img.onload = function() {
                ctx.drawImage(img, 0, 0);
            };
          img.src = data;
      }
    }

    window.addEventListener('resize', resizeCanvas);
    

    // --- Drawing functionality with Mouse and Touch support ---
    function getMousePos(canvas, evt) {
        const rect = canvas.getBoundingClientRect();
        return {
            x: evt.clientX - rect.left,
            y: evt.clientY - rect.top
        };
    }

    function getTouchPos(canvas, evt) {
        const rect = canvas.getBoundingClientRect();
        return {
            x: evt.touches[0].clientX - rect.left,
            y: evt.touches[0].clientY - rect.top
        };
    }

    function startDrawing(pos) {
        drawing = true;
        ctx.beginPath();
        ctx.moveTo(pos.x, pos.y);
    }

    function draw(pos) {
        if (!drawing) return;
        ctx.strokeStyle = color;
        ctx.lineWidth = 2;
        ctx.lineCap = 'round'; // Smoother lines
        ctx.lineTo(pos.x, pos.y);
        ctx.stroke();
    }

    // Mouse events
    drawCanvas.addEventListener('mousedown', e => startDrawing(getMousePos(drawCanvas, e)));
    drawCanvas.addEventListener('mousemove', e => draw(getMousePos(drawCanvas, e)));
    drawCanvas.addEventListener('mouseup', () => drawing = false);
    drawCanvas.addEventListener('mouseleave', () => drawing = false);

    // Touch events
    drawCanvas.addEventListener('touchstart', e => {
        if (e.target === drawCanvas) {
             e.preventDefault();
        }
        startDrawing(getTouchPos(drawCanvas, e));
    });
    drawCanvas.addEventListener('touchmove', e => {
        if (e.target === drawCanvas) {
            e.preventDefault();
       }
        draw(getTouchPos(drawCanvas, e));
    });
    drawCanvas.addEventListener('touchend', () => drawing = false);


    document.getElementById('colorPicker').addEventListener('change', e => {
      color = e.target.value;
    });

     // Initialize color picker value and canvas size
    document.getElementById('colorPicker').value = color;
    // Ensure layout is ready before initial resize and load
    window.onload = () => {
        resizeCanvas();
        loadEntries();
    }
  </script>
</body>
</html>